/*
* Sample Commit
*/
public class ModelBean{

    private String firstName;
    private String lastName;
    private String email;
    private String phone;

    public String getFirstName()
    {
        return fixNull(this.firstName);
    }

    public void setFirstName(String firstName)
    {
        this.firstName = firstName;
    }

    public String getLastName()
    {
        return fixNull(this.lastName);
    }

    public void setLastName(String lastName)
    {
        this.lastName = lastName;
    }

    public String getEmail()
    {
        return fixNull(this.email);
    }

    public void setEmail(String email)
    {
        this.email = email;
    }


    public String getPhone()
    {
        return fixNull(this.phone);
    }

    public void setPhone(String phone)
    {
        this.phone = phone;
    }
    
    private String fixNull(String in)
    {
        return (in == null) ? "" : in;
    }

    public String getMessage()
    {
        return "\nFirst Name: " + getFirstName() + "\n"
             +   "Last Name:  " + getLastName()  + "\n"
             +   "Email:      " + getEmail()     + "\n"
             +   "Phone:      " + getPhone()     + "\n";
    }

    
    public String toString(){
        return getMessage();
    }
}



/**************************************/
public interface Command
{

    public void execute(HttpServletRequest request, 
                        HttpServletResponse response) 
                    throws ServletException, IOException;
}

/***************************************/

public class InitCommand implements Command
{

    public void execute(HttpServletRequest  request, HttpServletResponse response) throws ServletException, IOException
    {
        request.setAttribute("modelBean", new ModelBean());

        ServletContext context = request.getSession().getServletContext();
        context.getRequestDispatcher("/view.jsp").forward(request, response);
        
    }
}
/**********************************************/

public class WriteCommand implements Command
{

    public void execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        ModelBean modelBean = new ModelBean();

        modelBean.setFirstName(request.getParameter("first_name")); 
        modelBean.setLastName( request.getParameter("last_name")); 
        modelBean.setEmail(    request.getParameter("email")); 
        modelBean.setPhone(    request.getParameter("phone")); 

        request.setAttribute("modelBean", modelBean);

        ServletContext context = request.getSession().getServletContext();
        context.getRequestDispatcher("/view.jsp").forward(request, response);
    }
}
/******************************************************/

@WebServlet( name="ControllerServlet", displayName="Controller Servlet", urlPatterns = {"/ControllerServlet","*.do"}, loadOnStartup=1)
public class ControllerServlet extends HttpServlet {
  private static final long serialVersionUID = 1L;
	 private Map<String,Command> commands = new HashMap<String,Command>();
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ControllerServlet() {
        super();
        // TODO Auto-generated constructor stub
        this.commands.put("init",  new InitCommand());
        this.commands.put("write", new WriteCommand());
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		processCommand(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		processCommand(request, response);
	}
	
	 public void processCommand(HttpServletRequest  request, HttpServletResponse response) 
	            throws ServletException, IOException
	    {

	        String formAction = request.getParameter("form_action");
	        System.out.println("FORM ACTION: " + formAction);
	        if(null == formAction){
	            formAction = "init";
	        }

	        Command command = commands.get(formAction);

	        if(null == command){
	            throw new IllegalArgumentException( "No command for form action: " + formAction);
	        }

	        command.execute(request, response);
	    }

}


/******************************************/

<html manifest="cache.manifest">
  <head>
    <title>
      Pattern Test
    </title>
    <link rel="stylesheet" href="resources/css/style.css" type="text/css" />
    <script type="text/javascript" src="resources/js/cachemonitor.js" ></script> 
  </head>
  <body onload="registerListeners()">
    <h2>Pattern Test</h2>
    <br />
    <p>
    Simple MVC and Cache manifest
    <div>
      <a href="init.do">Simple MVC Command v30</a>
     <p id="text">Init</p>
    </div>
    </p>    
    <img src="resources/img/Hydrangeas.jpg">
    <br />    
    <img src="resources/img/Koala.jpg">
    <br />    
    <br />    

    <br /> 
    <video id="player1" width="320" height="240" controls="controls">
  		<source src="resources/video/big_buck_bunny.mp4" type="video/mp4">
  		Your browser does not support the video tag.
	</video>   
	<br />    
    <br />   
    <video id="player2" width="320" height="240" controls="controls">
  		<source src="resources/video/big_buck_bunny_1.mp4" type="video/mp4">
  		Your browser does not support the video tag.
	</video>   
    <br />    
    <br />    
        <video id="player3" width="320" height="240" controls="controls">
  		<source src="resources/video/big_buck_bunny_2.mp4" type="video/mp4">
  		Your browser does not support the video tag.
	</video>  
	<br />    
	<br />     
    <p>
    </p>
  </body>
</html>

/*************************************/
<!-- Author: Ben Souther; ben@javaranch.com -->
<html>
  <head>
    <title>Simple Command</title>
  </head>
  <body>
    <h2>Simple Command</h2>  
    <form method="post" action="controller.do">
      <input type="hidden" name="form_action" value="write" />
      <table>
        <tr>
          <td>
            First Name:
          </td>
          <td>
            <input type="text" name="first_name" value="${modelBean.firstName}" />
          </td>
        </tr>
        <tr>
          <td>
            Last Name:
          </td>
          <td>
            <input type="text" name="last_name" value="${modelBean.lastName}" />
          </td>
        </tr>
        <tr>
          <td>
            Email:
          </td>
          <td>
            <input type="text" name="email" value="${modelBean.email}" />
          </td>
        </tr>
        <tr>
          <td>
            Phone:
          </td>
          <td>
            <input type="text" name="phone" value="${modelBean.phone}" />
          </td>
        </tr>
        <tr>
          <td>
            <input type="submit" name="enter_button" value="Enter" />
          </td>
          <td>
          </td>
        </tr>
      </table>
    </form>
    <pre>
      ${modelBean.message}
    <pre>
    <br />    
    <br />    
    <br />    
    <br />    
    <br />    
    <br />    
    <p>
    </p>
  </body>
</html>
/**************************************************************************************/
package com.infy.Listener;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

import org.apache.catalina.websocket.WsOutbound;




@WebListener
public class Listener implements ServletContextListener {
	ServletContext context;
	private static HashMap<String, Long> fileInfo = new HashMap<String, Long>();
	private static String fileLookupPath = "";
	private final ScheduledExecutorService scheduler = Executors
			.newScheduledThreadPool(1);
	private static Boolean fileBackUp = false;
	private static Map<String, Long> oldFileInfo = new HashMap<String, Long>();

	public void contextInitialized(ServletContextEvent contextEvent) {
		System.out.println("Context Created");
		context = contextEvent.getServletContext();
		// set variable to servlet context
		fileLookupPath = context.getRealPath("resources");
		String realContextPath = context.getRealPath("resources");

		// Done for the first time alone when the server starts up because
		// chances are that server is shutdown and resources are updated
		try {
			File dir = new File(fileLookupPath).getCanonicalFile();
			FileInputStream fis = new FileInputStream(dir
					+ "/resources.metadata");
			loadMaps(fis);
		} catch (Exception e) {
			e.printStackTrace();
		}

		Runnable runner = new Runnable() {

			public void run() {
				populateFileInfo();
			}
		};

		scheduler.scheduleWithFixedDelay(runner, 0, 15, TimeUnit.SECONDS);
	}

	public void contextDestroyed(ServletContextEvent contextEvent) {
		try {
			File dir = new File(fileLookupPath).getCanonicalFile();
			FileOutputStream fos = new FileOutputStream(dir
					+ "/resources.metadata");

			saveMaps(fos);
		} catch (Exception e) {
			e.printStackTrace();
		}
		context = contextEvent.getServletContext();
		System.out.println("Context Destroyed");
		scheduler.shutdown();
	}

	private void populateFileInfo() {
		// Already populated
		if (fileInfo.size() > 0) {
			try {
				System.out.println("FILE INFO SIZE GREATER"
						+ context.getAttribute("Sockets"));
				File dir = new File(fileLookupPath).getCanonicalFile();
				File[] files = dir.listFiles();
				searchFilesInDirectory(files);
				String msg = getUpdatedFiles(oldFileInfo, fileInfo);

				if (context.getAttribute("Sockets") != null) {
					ArrayList<updateStatus> socketList = (ArrayList<updateStatus>) context
							.getAttribute("Sockets");
					for (updateStatus messageInbound : socketList) {
						CharBuffer msgBuffer1 = CharBuffer.wrap("MSG1");
						CharBuffer msgBuffer2 = CharBuffer.wrap(msg);
						WsOutbound outbound = messageInbound.getWsOutbound();
						/*
						 * if (messageInbound.getUserName() !=
						 * this.getUserIdName()) {
						 * outbound.writeTextMessage(msgBuffer1);
						 * outbound.flush(); } else {
						 * outbound.writeTextMessage(msgBuffer2); } WsOutbound
						 * outbound = messageInbound.getWsOutbound();
						 */
						outbound.writeTextMessage(msgBuffer2);

					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		} else {
			try {

				File dir = new File(fileLookupPath).getCanonicalFile();

				File[] files = dir.listFiles();
				searchFilesInDirectory(files);

				System.out.println("PATH: " + fileLookupPath);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void searchFilesInDirectory(File[] files) {
		for (File file : files) {
			if (file.isDirectory()) {
				searchFilesInDirectory(file.listFiles());
			} else {
				if (!file.getName().contains(".css")
						|| !file.getName().contains(".js")) {
		
					fileInfo.put(file.getName(), file.lastModified());

				}
			}
		}

	}

	private String getUpdatedFiles(Map<String, Long> oldMap,
			HashMap<String, Long> newMap) {
		String msg = "null";
		for (Entry<String, Long> entry : oldMap.entrySet()) {
			String key = entry.getKey();
			Long oldTime = entry.getValue();
			System.out.println("Entry.getKey()" + entry.getKey()+ "::" +entry.getValue());
			if (newMap.get(key).longValue() > oldTime) {
				msg = msg + newMap.get(key);
				System.out.println("Entry.getKey()" + entry.getKey()+ "::" +entry.getValue());
			}
		}
		oldFileInfo = fileInfo;
		return msg;
	}

	public void saveMaps(FileOutputStream fos) {
		try {
			ObjectOutputStream s = new ObjectOutputStream(fos);
			s.writeObject(fileInfo);
			s.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public Map<String, Long> loadMaps(FileInputStream fis) {
		try {
			ObjectInputStream s = new ObjectInputStream(fis);
			oldFileInfo = (Map<String, Long>) s.readObject();
			s.close();
			return oldFileInfo;

		} catch (Exception e) {
			// Catch exceptions
		}
		return null;
	}
}
/************************************************************/



import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;

import org.apache.catalina.websocket.MessageInbound;
import org.apache.catalina.websocket.StreamInbound;
import org.apache.catalina.websocket.WebSocketServlet;
import org.apache.catalina.websocket.WsOutbound;





@WebServlet( name="UpdateStatus", displayName="Update Status", urlPatterns = {"/UpdateStatus","*.*"}, loadOnStartup=1)
public class UpdateStatus extends WebSocketServlet {
	private static final long serialVersionUID = 1L;
	private static HashMap<String , Long> fileInfo = new HashMap<String, Long>();
	private HttpServletRequest httpRequest;
	//private static List<UpdateMessageInbound> socketList = new ArrayList<UpdateMessageInbound>();
	private static List<updateStatus> socketList = new ArrayList<updateStatus>();	
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public UpdateStatus() {
        super();
        // TODO Auto-generated constructor stub
        System.out.println("UPDATE STATUS");
        
    }

    public void init(ServletConfig config) throws ServletException {  
    	super.init(config); //added this line then it worked
    	System.out.println("UPDATE CONFIG");
    	System.out.println(getServletContext().getAttribute("TEST"));

    }    
    
    @Override
    protected StreamInbound createWebSocketInbound(String arg0,
            HttpServletRequest arg1) {

        //return new UpdateMessageInbound();
    	return new updateStatus();
    }

    /*public static synchronized List<UpdateMessageInbound> getSocketList() {
        return socketList;
    }*/
    public static synchronized List<updateStatus> getSocketList() {
        return socketList;
    }
    public class updateStatus extends MessageInbound
    {
        private WsOutbound outbound;
        private int userIdName = 0;
        @Override
        public void onOpen( WsOutbound outbound )
        {
            this.outbound = outbound;
            this.userIdName = outbound.hashCode();
             System.out.println("socket opened!");
             getServletContext().setAttribute("channel", this.outbound);
             getSocketList().add(this);
        }

        @Override
        public void onTextMessage( CharBuffer buffer ) throws IOException
        {
            try
            {
            	
            	if(buffer.toString().equalsIgnoreCase("UPDATE")){
            		
                    outbound.writeTextMessage( CharBuffer.wrap( "abc testing".toCharArray() ) );
                    System.out.println("Message sent from server.");
                    getServletContext().setAttribute("Sockets", getSocketList());
                   
            	}

            }
            catch ( IOException ioException )
            {
                    System.out.println("error opening websocket");
            }

        }

        @Override
        protected void onBinaryMessage(ByteBuffer arg0) throws IOException {
            // TODO Auto-generated method stub

        }
        


        @Override
        protected void onClose(int status){
        	System.out.println("Connection close" + status);
        	getSocketList().remove(this);
        }
        public int getUserName(){
        	return userIdName;
        }
    }


}


